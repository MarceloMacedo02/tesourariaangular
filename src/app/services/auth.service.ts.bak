import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { BehaviorSubject, Observable, of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';

// Define the interface for the login request
export interface LoginRequest {
  username: string;
  password: string;
}

// Define the interface for the password recovery request
export interface PasswordRecoveryRequest {
  email: string;
}

// Define the interface for the login response
export interface LoginResponse {
  token: string;
  refreshToken: string;
  tokenType: string;
  expiresIn: number;
  username: string;
  firstName: string;
  grade: string;
  role: string;
  socioImageUrl: string;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private readonly API_URL = '/api/auth';
  private currentUserSubject = new BehaviorSubject<LoginResponse | null>(this.getCurrentUserFromStorage());
  public currentUser$ = this.currentUserSubject.asObservable();

  constructor(private http: HttpClient) { }

  /**
   * Get current user from storage
   */
  private getCurrentUserFromStorage(): LoginResponse | null {
    const user = localStorage.getItem('currentUser');
    if (user) {
      try {
        return JSON.parse(user);
      } catch (e) {
        return null;
      }
    }
    return null;
  }

  /**
   * Save user to storage
   */
  private saveUserToStorage(user: LoginResponse): void {
    localStorage.setItem('currentUser', JSON.stringify(user));
  }

  /**
   * Remove user from storage
   */
  private removeUserFromStorage(): void {
    localStorage.removeItem('currentUser');
    localStorage.removeItem('token');
  }

  /**
   * Get current user
   */
  public get currentUserValue(): LoginResponse | null {
    return this.currentUserSubject.value;
  }

  /**
   * Login method
   */
  login(username: string, password: string): Observable<LoginResponse> {
    const request: LoginRequest = { username, password };
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    
    return this.http.post<LoginResponse>(`${this.API_URL}/login`, request, { headers })
      .pipe(
        map(user => {
          // Store user details and jwt token in local storage to keep user logged in between page refreshes
          this.saveUserToStorage(user);
          localStorage.setItem('token', user.token);
          this.currentUserSubject.next(user);
          return user;
        }),
        catchError(error => {
          console.error('Login error:', error);
          return of(null as any);
        })
      );
  }

  /**
   * Password recovery method
   */
  sendPasswordRecoveryEmail(email: string): Observable<boolean> {
    const request: PasswordRecoveryRequest = { email };
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    
    return this.http.post<{message: string}>(`${this.API_URL}/recovery`, request, { headers })
      .pipe(
        map(response => {
          console.log('Password recovery email sent:', response.message);
          return true;
        }),
        catchError(error => {
          console.error('Password recovery error:', error);
          return of(false);
        })
      );
  }

  /**
   * Check if user is authenticated
   */
  isAuthenticated(): boolean {
    const token = localStorage.getItem('token');
    // Here you might want to also check if the token is expired
    return token !== null && token !== undefined && token !== '';
  }

  /**
   * Get token
   */
  getToken(): string | null {
    return localStorage.getItem('token');
  }

  /**
   * Logout method
   */
  logout(): void {
    // Remove user from local storage to log user out
    this.removeUserFromStorage();
    this.currentUserSubject.next(null);
  }

  /**
   * Refresh token method (if needed)
   */
  refreshToken(): Observable<LoginResponse> {
    const refreshToken = this.currentUserValue?.refreshToken;
    
    if (!refreshToken) {
      return of(null as any);
    }

    const headers = new HttpHeaders({ 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${refreshToken}`
    });
    
    return this.http.post<LoginResponse>(`${this.API_URL}/refresh`, {}, { headers })
      .pipe(
        map(user => {
          this.saveUserToStorage(user);
          localStorage.setItem('token', user.token);
          this.currentUserSubject.next(user);
          return user;
        }),
        catchError(error => {
          console.error('Token refresh error:', error);
          this.logout(); // If refresh fails, logout the user
          return of(null as any);
        })
      );
  }
}