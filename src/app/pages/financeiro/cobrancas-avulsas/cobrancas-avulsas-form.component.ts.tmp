import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import {
  Fornecedor,
  ReferenciasFinanceirasService,
  Rubrica,
  Socio,
} from '../../../services/referencias-financeiras.service';
import {
  Cobranca,
  CobrancasAvulsasService,
  NovaCobrancaAvulsa,
} from './cobrancas-avulsas.service';

@Component({
  selector: 'app-cobrancas-avulsas-form',
  template: `
    <div class="page-content">
      <div class="container-fluid">
        <div class="row">
          <div class="col-12">
            <div class="card">
              <div class="card-header">
                <h4 class="card-title mb-0">
                  {{ isEdicao ? 'Editar Cobrança' : 'Nova Cobrança Avulsa' }}
                </h4>
              </div>
              <div class="card-body">
                <!-- Erros de validação -->
                <div *ngIf="errors.length > 0" class="alert alert-danger">
                  <ul class="mb-0">
                    <li *ngFor="let error of errors">{{ error }}</li>
                  </ul>
                </div>

                <form [formGroup]="form" (ngSubmit)="onSubmit()">
                  <div class="row">
                    <div class="col-md-6">
                      <div class="mb-3">
                        <label for="socioId" class="form-label">Sócio</label>
                        <ng-select
                          [(ngModel)]="selectedSocioId"
                          [disabled]="isEdicao"
                          [clearable]="false"
                          [searchable]="true"
                          [closeOnSelect]="true"
                          placeholder="Selecione um sócio"
                          [items]="socios"
                          bindValue="id"
                          bindLabel="nome"
                          (change)="onSocioChange($event)"
                        >
                        </ng-select>
                      </div>
                    </div>

                    <div class="col-md-6">
                      <div class="mb-3">
                        <label for="fornecedorId" class="form-label"
                          >Fornecedor</label
                        >
                        <ng-select
                          [(ngModel)]="selectedFornecedorId"
                          [disabled]="isEdicao"
                          [clearable]="false"
                          [searchable]="true"
                          [closeOnSelect]="true"
                          placeholder="Selecione um fornecedor"
                          [items]="fornecedores"
                          bindValue="id"
                          bindLabel="nome"
                          (change)="onFornecedorChange($event)"
                        >
                        </ng-select>
                      </div>
                    </div>
                  </div>

                  <div class="row">
                    <div class="col-md-6">
                      <div class="mb-3">
                        <label for="rubricaId" class="form-label"
                          >Rubrica *</label
                        >
                        <ng-select
                          [(ngModel)]="selectedRubricaId"
                          [disabled]="isEdicao"
                          [clearable]="false"
                          [searchable]="true"
                          [closeOnSelect]="true"
                          placeholder="Selecione uma rubrica"
                          [items]="rubricas"
                          bindValue="id"
                          bindLabel="nome"
                          formControlName="rubricaId"
                        >
                        </ng-select>
                        <div
                          *ngIf="
                            form.get('rubricaId')?.invalid &&
                            form.get('rubricaId')?.touched
                          "
                          class="text-danger"
                        >
                          Rubrica é obrigatória
                        </div>
                      </div>
                    </div>

                    <div class="col-md-6">
                      <div class="mb-3">
                        <label for="descricao" class="form-label"
                          >Descrição *</label
                        >
                        <input
                          type="text"
                          class="form-control"
                          id="descricao"
                          formControlName="descricao"
                          placeholder="Descrição da cobrança"
                        />
                        <div
                          *ngIf="
                            form.get('descricao')?.invalid &&
                            form.get('descricao')?.touched
                          "
                          class="text-danger"
                        >
                          Descrição é obrigatória
                        </div>
                      </div>
                    </div>
                  </div>

                  <div class="row">
                    <div class="col-md-6">
                      <div class="mb-3">
                        <label for="valor" class="form-label">Valor *</label>
                        <input
                          type="number"
                          class="form-control"
                          id="valor"
                          formControlName="valor"
                          step="0.01"
                          placeholder="0,00"
                        />
                        <div
                          *ngIf="
                            form.get('valor')?.invalid &&
                            form.get('valor')?.touched
                          "
                          class="text-danger"
                        >
                          Valor é obrigatório e deve ser positivo
                        </div>
                      </div>
                    </div>
                    <div class="col-md-4">
                      <div class="mb-3">
                        <label for="dataVencimento" class="form-label"
                          >Data de Vencimento *</label
                        >
                        <input
                          type="text"
                          class="form-control"
                          id="dataVencimento"
                          name="dataVencimento"
                          [(ngModel)]="dataVencimento"
                          [disabled]="loading"
                          placeholder="dd/mm/aaaa"
                          mwlFlatpickr
                          [altInput]="true"
                          [convertModelValue]="true"
                          [dateFormat]="'Y-m-d'"
                          altFormat="d/m/Y"
                          formControlName="dataVencimento"
                        />
                        <div
                          *ngIf="
                            form.get('dataVencimento')?.invalid &&
                            form.get('dataVencimento')?.touched
                          "
                          class="text-danger"
                        >
                          Data de vencimento é obrigatória
                        </div>
                      </div>
                    </div>
                    <!-- <div class="col-md-6">
                      <div class="mb-3">
                        <label for="dataVencimento" class="form-label">Data de Vencimento *</label>
                        <input 
                          type="date" 
                          class="form-control" 
                          id="dataVencimento" 
                          formControlName="dataVencimento">
                        <div 
                          *ngIf="form.get('dataVencimento')?.invalid && form.get('dataVencimento')?.touched" 
                          class="text-danger">
                          Data de vencimento é obrigatória
                        </div>
                      </div>
                    </div> -->
                  </div>

                  <div class="row" *ngIf="isEdicao && cobranca">
                    <div class="col-md-6">
                      <div class="mb-3">
                        <label class="form-label">Status</label>
                        <div
                          class="form-control"
                          [ngClass]="'status-' + cobranca.status.toLowerCase()"
                          readonly
                        >
                          {{ cobranca.status | titlecase }}
                        </div>
                      </div>
                    </div>
                    <div class="col-md-6" *ngIf="cobranca.dataPagamento">
                      <div class="mb-3">
                        <label for="dataPagamento" class="form-label"
                          >Data de Pagamento</label
                        >
                        <input
                          type="date"
                          class="form-control"
                          id="dataPagamento"
                          [value]="cobranca.dataPagamento | date : 'yyyy-MM-dd'"
                          disabled
                        />
                      </div>
                    </div>
                  </div>

                  <div class="d-flex justify-content-between">
                    <button
                      type="button"
                      class="btn btn-secondary"
                      (click)="cancelar()"
                    >
                      Cancelar
                    </button>
                    <button
                      type="submit"
                      class="btn btn-primary"
                      [disabled]="form.invalid || isEdicao"
                    >
                      {{ isEdicao ? 'Atualizar' : 'Criar' }}
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `,
  styles: [
    `
      .status-aberta {
        background-color: #fff3cd;
        color: #856404;
      }
      .status-paga {
        background-color: #d4edda;
        color: #155724;
      }
      .status-cancelada {
        background-color: #f8d7da;
        color: #721c24;
      }
    `,
  ],
})
export class CobrancasAvulsasFormComponent implements OnInit {
  form: FormGroup;
  isEdicao = false;
  cobrancaId: number | null = null;
  cobranca: Cobranca | null = null;
  fornecedores: Fornecedor[] = [];
  rubricas: Rubrica[] = [];
  socios: Socio[] = [];
  errors: string[] = [];
  selectedFornecedorId: number | null = null;
  selectedRubricaId: number | null = null;
  selectedSocioId: number | null = null;
  dataVencimento: string = '';
  loading: boolean = false;

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private cobrancasAvulsasService: CobrancasAvulsasService,
    private referenciasFinanceirasService: ReferenciasFinanceirasService
  ) {
    this.form = this.fb.group({
      socioId: [''],
      fornecedorId: [''],
      rubricaId: ['', Validators.required],
      descricao: ['', Validators.required],
      valor: ['', [Validators.required, Validators.min(0.01)]],
      dataVencimento: ['', Validators.required],
    });
  }

  async ngOnInit(): Promise<void> {
    this.cobrancaId = Number(this.route.snapshot.paramMap.get('id'));
    this.isEdicao = !!this.cobrancaId;

    // Carregar dados necessários para os selects
    await this.loadData();

    if (this.isEdicao) {
      this.loadCobranca();
    }
  }

  async loadData(): Promise<void> {
    try {
      // Carregar fornecedores do backend
      this.fornecedores =
        (await this.referenciasFinanceirasService
          .getFornecedores()
          .toPromise()) || [];
    } catch (error: any) {
      console.error('Erro ao carregar fornecedores:', error);
      this.errors.push(
        'Erro ao carregar fornecedores: ' +
          (error.error?.message || 'Erro desconhecido')
      );
    }

    try {
      // Carregar rubricas do backend
      this.rubricas =
        (await this.referenciasFinanceirasService.getRubricas().toPromise()) ||
        [];
    } catch (error: any) {
      console.error('Erro ao carregar rubricas:', error);
      this.errors.push(
        'Erro ao carregar rubricas: ' +
          (error.error?.message || 'Erro desconhecido')
      );
    }

    try {
      // Carregar sócios do backend
      this.socios =
        (await this.referenciasFinanceirasService.getSocios().toPromise()) ||
        [];
    } catch (error: any) {
      console.error('Erro ao carregar sócios:', error);
      this.errors.push(
        'Erro ao carregar sócios: ' +
          (error.error?.message || 'Erro desconhecido')
      );
    }
  }

  loadCobranca(): void {
    if (this.cobrancaId) {
      this.cobrancasAvulsasService.getById(this.cobrancaId).subscribe({
        next: (data) => {
          this.cobranca = data;
          this.form.patchValue({
            socioId: data.socioId,
            fornecedorId: data.fornecedorId,
            rubricaId: data.rubricaId,
            descricao: data.descricao,
            valor: data.valorOriginal,
            dataVencimento: data.dataVencimento,
          });

          // Preencher os campos do modelo
          this.selectedSocioId = data.socioId || null;
          this.selectedFornecedorId = data.fornecedorId || null;
          this.selectedRubricaId = data.rubricaId || null;

          // Desabilitar campos durante edição
          this.form.disable();
        },
        error: (error) => {
          console.error('Erro ao carregar cobrança:', error);
          this.router.navigate(['/pages/financeiro/cobrancas-avulsas/lista']);
        },
      });
    }
  }

  onSocioChange(event: any): void {
    this.selectedSocioId = event?.id || null;
    if (this.selectedSocioId) {
      this.selectedFornecedorId = null; // Limpar fornecedor se sócio for selecionado
      this.form.get('fornecedorId')?.setValue('');
    }
  }

  onFornecedorChange(event: any): void {
    this.selectedFornecedorId = event?.id || null;
    if (this.selectedFornecedorId) {
      this.selectedSocioId = null; // Limpar sócio se fornecedor for selecionado
    }
  }

  cancelar(): void {
    this.router.navigate(['/pages/financeiro/cobrancas-avulsas/lista']);
  }

  onSubmit(): void {
    if (this.form.invalid) {
      return;
    }

    // Validação para garantir que pelo menos sócio ou fornecedor esteja informado
    if (!this.selectedSocioId && !this.selectedFornecedorId) {
      alert('É obrigatório informar pelo menos um entre sócio ou fornecedor.');
      return;
    }

    const formData = this.form.value;

    const cobrancaData: NovaCobrancaAvulsa = {
      socioId: this.selectedSocioId || undefined,
      fornecedorId:
        this.selectedFornecedorId || formData.fornecedorId || undefined,
      rubricaId: this.selectedRubricaId || formData.rubricaId || undefined,
      descricao: formData.descricao,
      valor: formData.valor,
      dataVencimento: formData.dataVencimento,
      tipoCobranca: 'AVULSA',
    };

    if (this.isEdicao && this.cobrancaId) {
      // Atualização (não permitida para cobranças avulsas existentes)
      console.log('Atualização de cobrança avulsa não é permitida');
      alert('Não é possível atualizar uma cobrança avulsa existente.');
    } else {
      // Criação de nova cobrança avulsa
      this.cobrancasAvulsasService.createAvulsa(cobrancaData).subscribe({
        next: (novaCobranca) => {
          console.log('Cobrança avulsa criada com sucesso:', novaCobranca);
          this.router.navigate(['/pages/financeiro/cobrancas-avulsas/lista']);
        },
        error: (error) => {
          console.error('Erro ao criar cobrança avulsa:', error);
          alert(
            'Erro ao criar cobrança avulsa: ' +
              (error.error?.message || 'Erro desconhecido')
          );
        },
      });
    }
  }
}
